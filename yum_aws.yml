---
- hosts: _master
  become: true
  tasks:
          - command: "yum install docker -y"
          - yum_repository:
                  baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
                  name: "Kubernetes"
                  description: "k8s for packages"
                  enabled: yes
                  gpgcheck: yes
                  gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg 
                  repo_gpgcheck: no
      
          - name: Install kubelet
            package:
                    name: kubelet
                    state: present
          - name: Install kubectl
            package:
                    name: kubectl
                    state: present

          - name: Install kubeadm
            package:
                    name: kubeadm
                    state: present
          - name : install pip
            package:
                    name: python2-pip
                    state: present
    
          - name: Start service kubelet, if not running
            service:
                    name: kubelet
                    enabled: yes      
          - name: copying daemon.json
            copy:
                    src: "/ws1/daemon.json"
                    dest: "/etc/docker/"
          - name: installing iproute-tc module
            package:
                    name: iproute-tc
                    state: present
          - name: shell script for networking
            shell: |
                    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
                    net.bridge.bridge-nf-call-ip6tables = 1
                    net.bridge.bridge-nf-call-iptables = 1
                    EOF
            args:
                    executable: /bin/bash
          - name: "Enabling IPtables Bridge Firewall Rule"
            command: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
          - service:
                  name: "docker"
                  state: "started"
                  enabled: yes

          - name: Check that the kube-apiserver.yaml exists
            stat:
                    path: /etc/kubernetes/manifests/kube-apiserver.yaml
            register: stat_result
          - name: "this will download all the required images we need for API,CM"
            command: "kubeadm config images pull"
          - name: Run cmd, if file doesnt exist already
            command: "kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"
            when: not stat_result.stat.exists
          
          - name: creating master as client
            shell: |
                    mkdir -p $HOME/.kube
                    sudo cp -i -n  /etc/kubernetes/admin.conf $HOME/.kube/config
                    sudo chown $(id -u):$(id -g) $HOME/.kube/config

     
          - name: Apply flannel.
            shell: |
                    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
          - name: join cmd
            command: "kubeadm token create --print-join-command"
            register: cmd_out
          - debug:
                  var: cmd_out.stdout_lines
          - name: Copy join command to local file.
            local_action: copy content="{{ cmd_out.stdout_lines[0] }}" dest="/ws1/kubernetes_join_command" mode=0777
          - name: Register dummy host with variable
            add_host:
                  name: "DUMMY_HOST"
                  PLAY1VAR_NEW: "{{ cmd_out.stdout }}"
          - file:
                  state: directory
                  path: "/webfiles"
          - name: "html code"
            copy:
                  src: "/ws1/webpagecode.html"
                  dest: "/var/www/html/"
          - pip:
                  name: "docker-py"
          - docker_image:
                  name: centos
                  source: pull
          - docker_container:
                  name: "mydoc1"
                  image: centos
                  state: started
                  


- hosts: _slave
  become: true
  tasks:
          - command: "yum install docker -y"
          - yum_repository:
                  baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
                  name: "Kubernetes"
                  description: "k8s for packages"
                  enabled: yes
                  gpgcheck: yes
                  gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
                  repo_gpgcheck: no

          - name: Install kubelet
            package:
                    name: kubelet
                    state: present
          - name: Install kubectl
            package:
                    name: kubectl
                    state: present

          - name: Install kubeadm
            package:
                    name: kubeadm
                    state: present
          - name : install pip
            package:
                    name: python2-pip
                    state: present

          - name: Start service kubelet, if not running
            service:
                    name: kubelet
                    enabled: yes
          - name: copying daemon.json
            copy:
                    src: "/ws1/daemon.json"
                    dest: "/etc/docker/"
          - service:
                  name: "docker"
                  state: "started"
                  enabled: yes

          - name: installing iproute-tc module
            package:
                    name: iproute-tc
                    state: present
          - name: shell script for networking
            shell: |
                    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
                    net.bridge.bridge-nf-call-ip6tables = 1
                    net.bridge.bridge-nf-call-iptables = 1
                    EOF
            args:
                    executable: /bin/bash
          - name: sysctl service           
            shell: |
                    sysctl --system
          - name: Copy join command from Ansiblehost to the worker nodes. 
            copy:
                    src: /ws1/kubernetes_join_command
                    dest: /root/kubernetes_join_command
                    mode: 0777
          - name: Check that ca.crt exists
            stat:
                    path: /etc/kubernetes/pki/ca.crt
            register: stat_value

          - name: Join the Worker nodes to the cluster.
            command: sh /root/kubernetes_join_command
            when: not stat_value.stat.exists
- hosts: _master
  become: true
  tasks:
          - name: Apply flannel.
            shell: |
                    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

